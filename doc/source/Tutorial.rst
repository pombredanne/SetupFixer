.. _Tutorial:

Tutorial
========

This is a short tutorial explaining how to install and use SetupFixer.

Understanding requirements files
--------------------------------

The ``pip`` requirements file format is documented on the *pip* website.

* http://www.pip-installer.org/en/latest/requirements.html

SetupFixer honours this format, including version numbers and packages in the
*"editable form"*.

Using the ``RequirementParser``
-------------------------------

In order to use SetupFixer's requirements parser in a package you need to copy 
``requirements.py`` into the top-level of you Python package, where ``setup.py``
is located, and add a bit of code to ``setup.py``. SetupFixer comes with a 
convenience function to assist the installation of the requirement parser.

Install SetupFixer.

.. code-block:: bash

    pip install setupfixer

Change to the top-level directory of your Python package, where ``setup.py`` is
located.

.. code-block:: bash

    python -m setupfixer --install
    
You can upgrade an existing ``requirements.py`` too.

.. code-block:: bash

    python -m setupfixer --upgrade

Adapting ``setup.py``
---------------------

A base requirements file is supported, and additional suffixed files can be
used to specify requirements for tests and extras. Dependency links are 
automatically combined from all requirements files found.

Basic example usage for ``requirements*.txt`` in the same directory:

.. code-block:: python

    from requirements import RequirementsParser
    
    requirements = RequirementsParser()
    
    setup(
        ...
        install_requires=requirements.install_requires,
        setup_requires=requirements.setup_requires,
        tests_require=requirements.tests_require,
        extras_require=requirements.extras_require,
        dependency_links=requirements.dependency_links,
        ...
    )

The ``RequirementsParser`` class can be instantiated with a custom path,
filename prefix and file extension if required:

.. code-block:: python

    requirements = RequirementsParser(path='/', name='depends', extn='conf')

Dependency Links
----------------

Dependency links are automatically combined from all requirements files found, 
these links are automatically added to *setuptools* ``dependency_links``. If a 
file named ``dependency_links.txt`` is found in the same path as the 
requirements files, dependencies listed in the file will also be added to the
dependency links generated by the requirements parser.

Additional requirements
-----------------------

A globbing approach is used to locate additional requirements files which
contain packages for use during setup or when testing or to specify optional 
extra packages.

* ``requirements-setup.txt`` - is parsed to populate *setuptools* ``setup_requires``.
* ``requirements-tests.txt`` - is parsed to populate *setuptools* ``tests_require`` as well as being added as an extra (see below) with the name ``tests``.
 
Extra requirements
------------------

You can also request `Extras`_ by creating additional *requirements* files. For 
example, a file with the name ``requirements-cython.txt`` would be added to the 
extra packages dictionary with the name ``cython``.

Platform requirements
---------------------

Support has also been added for operating system specific packages such
packages listed in ``requirements+linux.txt`` will only be installed on Linux.
The names that can be used are anything that matches strings generated by
``__import__('platform').system().lower()``.

Platform example
~~~~~~~~~~~~~~~~

Let's suppose you are creating a killer desktop application using the excellent 
`PyGUI`_. 

* PyGUI wraps `PyObjC`_ on MacOSX, but `PyObjC` can't be installed on Window.
* PyGUI wraps `pywin32`_ on Windows, but `pywin32` can't be installed on MacOSX.


Given the following *requirements* files...

``requirements.txt``

.. code-block:: none

    soapbox>=0.3.2

``requirements+windows.txt``

.. code-block:: none

    pywin32
    wmi

``requirements+darwin.txt``

.. code-block:: none

    pyobjc==2.3
    
1. Windows will install:

.. code-block:: none

    soapbox>=0.3.2
    pywin32
    wmi

2. MacOSX will install:

.. code-block:: none

    soapbox>=0.3.2
    pyobjc==2.3

3. Linux will only install ``soapbox>=0.3.2`` because no ``requirements+linux.txt`` file exists.
 
Learning by example
-------------------

If you prefer to learn by example then take a look at the following projects as
they are all using SetupFixer.

* http://pypi.python.org/pypi/FilterPype/
* http://pypi.python.org/pypi/PyCPUID/
* http://pypi.python.org/pypi/Soapbox/

.. _Extras: http://peak.telecommunity.com/DevCenter/setuptools#declaring-extras-optional-features-with-their-own-dependencies
.. _PyGUI: http://www.cosc.canterbury.ac.nz/greg.ewing/python_gui/
.. _PyObjC: http://pyobjc.sourceforge.net/
.. _pywin32: http://sourceforge.net/projects/pywin32/
